diff -urN a/alljoyn/common/crypto/openssl/CryptoAES.cc b/alljoyn/common/crypto/openssl/CryptoAES.cc
--- a/alljoyn/common/crypto/openssl/CryptoAES.cc	2016-03-16 01:23:31.000000000 +0900
+++ b/alljoyn/common/crypto/openssl/CryptoAES.cc	2018-07-18 15:54:14.154701646 +0900
@@ -341,9 +341,17 @@
      * Encrypt the authentication field
      */
     Block U;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     AES_ctr128_encrypt(T.data, U.data, 16, &keyState->key, ivec.data, ecount_buf.data, &num);
+#else
+    CRYPTO_ctr128_encrypt(T.data, U.data, 16, &keyState->key, ivec.data, ecount_buf.data, &num, (block128_f)AES_encrypt);
+#endif
     Trace("CTR Start: ", ivec.data, 16);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     AES_ctr128_encrypt((const uint8_t*)in, (uint8_t*)out, len, &keyState->key, ivec.data, ecount_buf.data, &num);
+#else
+    CRYPTO_ctr128_encrypt((const uint8_t*)in, (uint8_t*)out, len, &keyState->key, ivec.data, ecount_buf.data, &num, (block128_f)AES_encrypt);
+#endif
     memcpy((uint8_t*)out + len, U.data, authLen);
     len += authLen;
     return ER_OK;
@@ -394,11 +402,19 @@
     Block T;
     len = len - authLen;
     memcpy(U.data, (const uint8_t*)in + len, authLen);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     AES_ctr128_encrypt(U.data, T.data, sizeof(T.data), &keyState->key, ivec.data, ecount_buf.data, &num);
+#else
+    CRYPTO_ctr128_encrypt(U.data, T.data, sizeof(T.data), &keyState->key, ivec.data, ecount_buf.data, &num, (block128_f)AES_encrypt);
+#endif
     /*
      * Decrypt message.
      */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     AES_ctr128_encrypt((const uint8_t*)in, (uint8_t*)out, len, &keyState->key, ivec.data, ecount_buf.data, &num);
+#else
+    CRYPTO_ctr128_encrypt((const uint8_t*)in, (uint8_t*)out, len, &keyState->key, ivec.data, ecount_buf.data, &num, (block128_f)AES_encrypt);
+#endif
     /*
      * Compute and verify the authentication field T.
      */
diff -urN a/alljoyn/common/crypto/openssl/CryptoHash.cc b/alljoyn/common/crypto/openssl/CryptoHash.cc
--- a/alljoyn/common/crypto/openssl/CryptoHash.cc	2016-03-16 01:23:31.000000000 +0900
+++ b/alljoyn/common/crypto/openssl/CryptoHash.cc	2018-07-18 15:52:03.755249464 +0900
@@ -45,8 +45,13 @@
 
     /// Union of context storage for HMAC or MD.
     union {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         HMAC_CTX hmac;    ///< Storage for the HMAC context.
         EVP_MD_CTX md;    ///< Storage for the MD context.
+#else
+        HMAC_CTX *hmac;    ///< Storage for the HMAC context.
+        EVP_MD_CTX *md;    ///< Storage for the MD context.
+#endif
         uint8_t pad[512]; ///< Ensure we have enough storage for openssl 1.0
     };
 
@@ -97,9 +102,15 @@
     ctx = new Crypto_Hash::Context(MAC);
 
     if (MAC) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         HMAC_CTX_init(&ctx->hmac);
         HMAC_Init_ex(&ctx->hmac, hmacKey, keyLen, mdAlgorithm, NULL);
     } else if (EVP_DigestInit(&ctx->md, mdAlgorithm) == 0) {
+#else
+        ctx->hmac = HMAC_CTX_new();
+        HMAC_Init_ex(ctx->hmac, hmacKey, keyLen, mdAlgorithm, NULL);
+    } else if (EVP_DigestInit(ctx->md, mdAlgorithm) == 0) {
+#endif
         status = ER_CRYPTO_ERROR;
         QCC_LogError(status, ("Initializing hash digest"));
     }
@@ -122,9 +133,15 @@
     if (ctx) {
         if (initialized) {
             if (MAC) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
                 HMAC_CTX_cleanup(&ctx->hmac);
             } else {
                 EVP_MD_CTX_cleanup(&ctx->md);
+#else
+                HMAC_CTX_free(ctx->hmac);
+            } else {
+                EVP_MD_CTX_free(ctx->md);
+#endif
             }
         }
         delete ctx;
@@ -145,8 +162,13 @@
     }
     if (initialized) {
         if (MAC) {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             HMAC_Update(&ctx->hmac, buf, bufSize);
         } else if (EVP_DigestUpdate(&ctx->md, buf, bufSize) == 0) {
+#else
+            HMAC_Update(ctx->hmac, buf, bufSize);
+        } else if (EVP_DigestUpdate(ctx->md, buf, bufSize) == 0) {
+#endif
             status = ER_CRYPTO_ERROR;
             QCC_LogError(status, ("Updating hash digest"));
         }
@@ -182,21 +204,36 @@
                 QCC_LogError(status, ("Keep alive is not allowed for HMAC"));
                 keepAlive = false;
             }
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             HMAC_Final(&ctx->hmac, digest, NULL);
             HMAC_CTX_cleanup(&ctx->hmac);
+#else
+            HMAC_Final(ctx->hmac, digest, NULL);
+            HMAC_CTX_free(ctx->hmac);
+#endif
             initialized = false;
         } else {
             Context* keep = NULL;
             /* To keep the hash alive we need to copy the context before calling EVP_DigestFinal */
             if (keepAlive) {
                 keep = new Context(false);
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
                 EVP_MD_CTX_copy(&keep->md, &ctx->md);
             }
             if (EVP_DigestFinal(&ctx->md, digest, NULL) == 0) {
+#else
+                EVP_MD_CTX_copy(keep->md, ctx->md);
+            }
+            if (EVP_DigestFinal(ctx->md, digest, NULL) == 0) {
+#endif
                 status = ER_CRYPTO_ERROR;
                 QCC_LogError(status, ("Finalizing hash digest"));
             }
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             EVP_MD_CTX_cleanup(&ctx->md);
+#else
+            EVP_MD_CTX_free(ctx->md);
+#endif
             if (keep) {
                 delete ctx;
                 ctx = keep;
diff -urN a/alljoyn/common/crypto/openssl/OpenSsl.h b/alljoyn/common/crypto/openssl/OpenSsl.h
--- a/alljoyn/common/crypto/openssl/OpenSsl.h	2016-03-16 01:23:31.000000000 +0900
+++ b/alljoyn/common/crypto/openssl/OpenSsl.h	2018-07-18 15:41:28.610791688 +0900
@@ -22,6 +22,8 @@
 #ifndef _QCC_OPENSSL_H
 #define _QCC_OPENSSL_H
 
+#include <openssl/opensslv.h>
+
 #include <openssl/aes.h>
 #include <openssl/bio.h>
 #include <openssl/bn.h>
@@ -33,6 +35,7 @@
 #include <openssl/sha.h>
 #include <openssl/ssl.h>
 #include <openssl/x509.h>
+#include <openssl/modes.h>
 
 namespace qcc {
 
